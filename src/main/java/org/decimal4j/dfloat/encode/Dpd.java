/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 decimal4j (tools4j), Marco Terzer
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.decimal4j.dfloat.encode;

import java.io.IOException;

import org.decimal4j.dfloat.encode.other.DecNum;

/**
 * Densely packed digital encoding.
 */
public class Dpd {

	private Dpd() {
		throw new RuntimeException("no Dpd for you!");
	}

	/** 3 decimal digits, 1000 values */
	private static final int[] INT_TO_DPD = {0,1,2,3,4,5,6,7,8,9,16,17,18,19,20,21,22,23,24,25,32,33,34,35,36,37,38,39,40,41,48,49,50,51,52,53,54,55,56,57,64,65,66,67,68,69,70,71,72,73,80,81,82,83,84,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,112,113,114,115,116,117,118,119,120,121,10,11,42,43,74,75,106,107,78,79,26,27,58,59,90,91,122,123,94,95,128,129,130,131,132,133,134,135,136,137,144,145,146,147,148,149,150,151,152,153,160,161,162,163,164,165,166,167,168,169,176,177,178,179,180,181,182,183,184,185,192,193,194,195,196,197,198,199,200,201,208,209,210,211,212,213,214,215,216,217,224,225,226,227,228,229,230,231,232,233,240,241,242,243,244,245,246,247,248,249,138,139,170,171,202,203,234,235,206,207,154,155,186,187,218,219,250,251,222,223,256,257,258,259,260,261,262,263,264,265,272,273,274,275,276,277,278,279,280,281,288,289,290,291,292,293,294,295,296,297,304,305,306,307,308,309,310,311,312,313,320,321,322,323,324,325,326,327,328,329,336,337,338,339,340,341,342,343,344,345,352,353,354,355,356,357,358,359,360,361,368,369,370,371,372,373,374,375,376,377,266,267,298,299,330,331,362,363,334,335,282,283,314,315,346,347,378,379,350,351,384,385,386,387,388,389,390,391,392,393,400,401,402,403,404,405,406,407,408,409,416,417,418,419,420,421,422,423,424,425,432,433,434,435,436,437,438,439,440,441,448,449,450,451,452,453,454,455,456,457,464,465,466,467,468,469,470,471,472,473,480,481,482,483,484,485,486,487,488,489,496,497,498,499,500,501,502,503,504,505,394,395,426,427,458,459,490,491,462,463,410,411,442,443,474,475,506,507,478,479,512,513,514,515,516,517,518,519,520,521,528,529,530,531,532,533,534,535,536,537,544,545,546,547,548,549,550,551,552,553,560,561,562,563,564,565,566,567,568,569,576,577,578,579,580,581,582,583,584,585,592,593,594,595,596,597,598,599,600,601,608,609,610,611,612,613,614,615,616,617,624,625,626,627,628,629,630,631,632,633,522,523,554,555,586,587,618,619,590,591,538,539,570,571,602,603,634,635,606,607,640,641,642,643,644,645,646,647,648,649,656,657,658,659,660,661,662,663,664,665,672,673,674,675,676,677,678,679,680,681,688,689,690,691,692,693,694,695,696,697,704,705,706,707,708,709,710,711,712,713,720,721,722,723,724,725,726,727,728,729,736,737,738,739,740,741,742,743,744,745,752,753,754,755,756,757,758,759,760,761,650,651,682,683,714,715,746,747,718,719,666,667,698,699,730,731,762,763,734,735,768,769,770,771,772,773,774,775,776,777,784,785,786,787,788,789,790,791,792,793,800,801,802,803,804,805,806,807,808,809,816,817,818,819,820,821,822,823,824,825,832,833,834,835,836,837,838,839,840,841,848,849,850,851,852,853,854,855,856,857,864,865,866,867,868,869,870,871,872,873,880,881,882,883,884,885,886,887,888,889,778,779,810,811,842,843,874,875,846,847,794,795,826,827,858,859,890,891,862,863,896,897,898,899,900,901,902,903,904,905,912,913,914,915,916,917,918,919,920,921,928,929,930,931,932,933,934,935,936,937,944,945,946,947,948,949,950,951,952,953,960,961,962,963,964,965,966,967,968,969,976,977,978,979,980,981,982,983,984,985,992,993,994,995,996,997,998,999,1000,1001,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,906,907,938,939,970,971,1002,1003,974,975,922,923,954,955,986,987,1018,1019,990,991,12,13,268,269,524,525,780,781,46,47,28,29,284,285,540,541,796,797,62,63,44,45,300,301,556,557,812,813,302,303,60,61,316,317,572,573,828,829,318,319,76,77,332,333,588,589,844,845,558,559,92,93,348,349,604,605,860,861,574,575,108,109,364,365,620,621,876,877,814,815,124,125,380,381,636,637,892,893,830,831,14,15,270,271,526,527,782,783,110,111,30,31,286,287,542,543,798,799,126,127,140,141,396,397,652,653,908,909,174,175,156,157,412,413,668,669,924,925,190,191,172,173,428,429,684,685,940,941,430,431,188,189,444,445,700,701,956,957,446,447,204,205,460,461,716,717,972,973,686,687,220,221,476,477,732,733,988,989,702,703,236,237,492,493,748,749,1004,1005,942,943,252,253,508,509,764,765,1020,1021,958,959,142,143,398,399,654,655,910,911,238,239,158,159,414,415,670,671,926,927,254,255};
	/** 10 bits, 1024 values */
	private static final int[] DPD_TO_INT_10 = {0,1,2,3,4,5,6,7,8,9,80,81,800,801,880,881,10,11,12,13,14,15,16,17,18,19,90,91,810,811,890,891,20,21,22,23,24,25,26,27,28,29,82,83,820,821,808,809,30,31,32,33,34,35,36,37,38,39,92,93,830,831,818,819,40,41,42,43,44,45,46,47,48,49,84,85,840,841,88,89,50,51,52,53,54,55,56,57,58,59,94,95,850,851,98,99,60,61,62,63,64,65,66,67,68,69,86,87,860,861,888,889,70,71,72,73,74,75,76,77,78,79,96,97,870,871,898,899,100,101,102,103,104,105,106,107,108,109,180,181,900,901,980,981,110,111,112,113,114,115,116,117,118,119,190,191,910,911,990,991,120,121,122,123,124,125,126,127,128,129,182,183,920,921,908,909,130,131,132,133,134,135,136,137,138,139,192,193,930,931,918,919,140,141,142,143,144,145,146,147,148,149,184,185,940,941,188,189,150,151,152,153,154,155,156,157,158,159,194,195,950,951,198,199,160,161,162,163,164,165,166,167,168,169,186,187,960,961,988,989,170,171,172,173,174,175,176,177,178,179,196,197,970,971,998,999,200,201,202,203,204,205,206,207,208,209,280,281,802,803,882,883,210,211,212,213,214,215,216,217,218,219,290,291,812,813,892,893,220,221,222,223,224,225,226,227,228,229,282,283,822,823,828,829,230,231,232,233,234,235,236,237,238,239,292,293,832,833,838,839,240,241,242,243,244,245,246,247,248,249,284,285,842,843,288,289,250,251,252,253,254,255,256,257,258,259,294,295,852,853,298,299,260,261,262,263,264,265,266,267,268,269,286,287,862,863,888,889,270,271,272,273,274,275,276,277,278,279,296,297,872,873,898,899,300,301,302,303,304,305,306,307,308,309,380,381,902,903,982,983,310,311,312,313,314,315,316,317,318,319,390,391,912,913,992,993,320,321,322,323,324,325,326,327,328,329,382,383,922,923,928,929,330,331,332,333,334,335,336,337,338,339,392,393,932,933,938,939,340,341,342,343,344,345,346,347,348,349,384,385,942,943,388,389,350,351,352,353,354,355,356,357,358,359,394,395,952,953,398,399,360,361,362,363,364,365,366,367,368,369,386,387,962,963,988,989,370,371,372,373,374,375,376,377,378,379,396,397,972,973,998,999,400,401,402,403,404,405,406,407,408,409,480,481,804,805,884,885,410,411,412,413,414,415,416,417,418,419,490,491,814,815,894,895,420,421,422,423,424,425,426,427,428,429,482,483,824,825,848,849,430,431,432,433,434,435,436,437,438,439,492,493,834,835,858,859,440,441,442,443,444,445,446,447,448,449,484,485,844,845,488,489,450,451,452,453,454,455,456,457,458,459,494,495,854,855,498,499,460,461,462,463,464,465,466,467,468,469,486,487,864,865,888,889,470,471,472,473,474,475,476,477,478,479,496,497,874,875,898,899,500,501,502,503,504,505,506,507,508,509,580,581,904,905,984,985,510,511,512,513,514,515,516,517,518,519,590,591,914,915,994,995,520,521,522,523,524,525,526,527,528,529,582,583,924,925,948,949,530,531,532,533,534,535,536,537,538,539,592,593,934,935,958,959,540,541,542,543,544,545,546,547,548,549,584,585,944,945,588,589,550,551,552,553,554,555,556,557,558,559,594,595,954,955,598,599,560,561,562,563,564,565,566,567,568,569,586,587,964,965,988,989,570,571,572,573,574,575,576,577,578,579,596,597,974,975,998,999,600,601,602,603,604,605,606,607,608,609,680,681,806,807,886,887,610,611,612,613,614,615,616,617,618,619,690,691,816,817,896,897,620,621,622,623,624,625,626,627,628,629,682,683,826,827,868,869,630,631,632,633,634,635,636,637,638,639,692,693,836,837,878,879,640,641,642,643,644,645,646,647,648,649,684,685,846,847,688,689,650,651,652,653,654,655,656,657,658,659,694,695,856,857,698,699,660,661,662,663,664,665,666,667,668,669,686,687,866,867,888,889,670,671,672,673,674,675,676,677,678,679,696,697,876,877,898,899,700,701,702,703,704,705,706,707,708,709,780,781,906,907,986,987,710,711,712,713,714,715,716,717,718,719,790,791,916,917,996,997,720,721,722,723,724,725,726,727,728,729,782,783,926,927,968,969,730,731,732,733,734,735,736,737,738,739,792,793,936,937,978,979,740,741,742,743,744,745,746,747,748,749,784,785,946,947,788,789,750,751,752,753,754,755,756,757,758,759,794,795,956,957,798,799,760,761,762,763,764,765,766,767,768,769,786,787,966,967,988,989,770,771,772,773,774,775,776,777,778,779,796,797,976,977,998,999};
	private static final int[] DPD_TO_INT_20 = initIntMultiple(DPD_TO_INT_10, 1000);
	private static final int[] DPD_TO_INT_30 = initIntMultiple(DPD_TO_INT_10, 1000000);
	private static final long[] DPD_TO_INT_40 = initLongMultiple(DPD_TO_INT_10, 1000000000);
	private static final long[] DPD_TO_INT_50 = initLongMultiple(DPD_TO_INT_10, 1000000000000L);
	private static final int[] DPD_TO_INT_NLZ = nlz(DPD_TO_INT_10);
	private static final int[] DPD_TO_INT_NTZ = ntz(DPD_TO_INT_10);
	private static final int[] DPD_TO_INT_RSHIFT_1 = initIntShift(DPD_TO_INT_10, -1);
	private static final int[] DPD_TO_INT_RSHIFT_2 = initIntShift(DPD_TO_INT_10, -2);
	private static final int[] DPD_TO_INT_LSHIFT_1 = initIntShift(DPD_TO_INT_10, 1);
	private static final int[] DPD_TO_INT_LSHIFT_2 = initIntShift(DPD_TO_INT_10, 2);
	private static final char[] DPD_TO_DIGIT_0 = {'0','1','2','3','4','5','6','7','8','9','0','1','0','1','0','1','0','1','2','3','4','5','6','7','8','9','0','1','0','1','0','1','0','1','2','3','4','5','6','7','8','9','2','3','0','1','8','9','0','1','2','3','4','5','6','7','8','9','2','3','0','1','8','9','0','1','2','3','4','5','6','7','8','9','4','5','0','1','8','9','0','1','2','3','4','5','6','7','8','9','4','5','0','1','8','9','0','1','2','3','4','5','6','7','8','9','6','7','0','1','8','9','0','1','2','3','4','5','6','7','8','9','6','7','0','1','8','9','0','1','2','3','4','5','6','7','8','9','0','1','0','1','0','1','0','1','2','3','4','5','6','7','8','9','0','1','0','1','0','1','0','1','2','3','4','5','6','7','8','9','2','3','0','1','8','9','0','1','2','3','4','5','6','7','8','9','2','3','0','1','8','9','0','1','2','3','4','5','6','7','8','9','4','5','0','1','8','9','0','1','2','3','4','5','6','7','8','9','4','5','0','1','8','9','0','1','2','3','4','5','6','7','8','9','6','7','0','1','8','9','0','1','2','3','4','5','6','7','8','9','6','7','0','1','8','9','0','1','2','3','4','5','6','7','8','9','0','1','2','3','2','3','0','1','2','3','4','5','6','7','8','9','0','1','2','3','2','3','0','1','2','3','4','5','6','7','8','9','2','3','2','3','8','9','0','1','2','3','4','5','6','7','8','9','2','3','2','3','8','9','0','1','2','3','4','5','6','7','8','9','4','5','2','3','8','9','0','1','2','3','4','5','6','7','8','9','4','5','2','3','8','9','0','1','2','3','4','5','6','7','8','9','6','7','2','3','0','0','0','1','2','3','4','5','6','7','8','9','6','7','2','3','0','0','0','1','2','3','4','5','6','7','8','9','0','1','2','3','2','3','0','1','2','3','4','5','6','7','8','9','0','1','2','3','2','3','0','1','2','3','4','5','6','7','8','9','2','3','2','3','8','9','0','1','2','3','4','5','6','7','8','9','2','3','2','3','8','9','0','1','2','3','4','5','6','7','8','9','4','5','2','3','8','9','0','1','2','3','4','5','6','7','8','9','4','5','2','3','8','9','0','1','2','3','4','5','6','7','8','9','6','7','2','3','0','0','0','1','2','3','4','5','6','7','8','9','6','7','2','3','0','0','0','1','2','3','4','5','6','7','8','9','0','1','4','5','4','5','0','1','2','3','4','5','6','7','8','9','0','1','4','5','4','5','0','1','2','3','4','5','6','7','8','9','2','3','4','5','8','9','0','1','2','3','4','5','6','7','8','9','2','3','4','5','8','9','0','1','2','3','4','5','6','7','8','9','4','5','4','5','8','9','0','1','2','3','4','5','6','7','8','9','4','5','4','5','8','9','0','1','2','3','4','5','6','7','8','9','6','7','4','5','0','0','0','1','2','3','4','5','6','7','8','9','6','7','4','5','0','0','0','1','2','3','4','5','6','7','8','9','0','1','4','5','4','5','0','1','2','3','4','5','6','7','8','9','0','1','4','5','4','5','0','1','2','3','4','5','6','7','8','9','2','3','4','5','8','9','0','1','2','3','4','5','6','7','8','9','2','3','4','5','8','9','0','1','2','3','4','5','6','7','8','9','4','5','4','5','8','9','0','1','2','3','4','5','6','7','8','9','4','5','4','5','8','9','0','1','2','3','4','5','6','7','8','9','6','7','4','5','0','0','0','1','2','3','4','5','6','7','8','9','6','7','4','5','0','0','0','1','2','3','4','5','6','7','8','9','0','1','6','7','6','7','0','1','2','3','4','5','6','7','8','9','0','1','6','7','6','7','0','1','2','3','4','5','6','7','8','9','2','3','6','7','8','9','0','1','2','3','4','5','6','7','8','9','2','3','6','7','8','9','0','1','2','3','4','5','6','7','8','9','4','5','6','7','8','9','0','1','2','3','4','5','6','7','8','9','4','5','6','7','8','9','0','1','2','3','4','5','6','7','8','9','6','7','6','7','0','0','0','1','2','3','4','5','6','7','8','9','6','7','6','7','0','0','0','1','2','3','4','5','6','7','8','9','0','1','6','7','6','7','0','1','2','3','4','5','6','7','8','9','0','1','6','7','6','7','0','1','2','3','4','5','6','7','8','9','2','3','6','7','8','9','0','1','2','3','4','5','6','7','8','9','2','3','6','7','8','9','0','1','2','3','4','5','6','7','8','9','4','5','6','7','8','9','0','1','2','3','4','5','6','7','8','9','4','5','6','7','8','9','0','1','2','3','4','5','6','7'};
	private static final char[] DPD_TO_DIGIT_1 = {'0','0','0','0','0','0','0','0','0','0','8','8','0','0','8','8','1','1','1','1','1','1','1','1','1','1','9','9','1','1','9','9','2','2','2','2','2','2','2','2','2','2','8','8','2','2','0','0','3','3','3','3','3','3','3','3','3','3','9','9','3','3','1','1','4','4','4','4','4','4','4','4','4','4','8','8','4','4','8','8','5','5','5','5','5','5','5','5','5','5','9','9','5','5','9','9','6','6','6','6','6','6','6','6','6','6','8','8','6','6','8','8','7','7','7','7','7','7','7','7','7','7','9','9','7','7','9','9','0','0','0','0','0','0','0','0','0','0','8','8','0','0','8','8','1','1','1','1','1','1','1','1','1','1','9','9','1','1','9','9','2','2','2','2','2','2','2','2','2','2','8','8','2','2','0','0','3','3','3','3','3','3','3','3','3','3','9','9','3','3','1','1','4','4','4','4','4','4','4','4','4','4','8','8','4','4','8','8','5','5','5','5','5','5','5','5','5','5','9','9','5','5','9','9','6','6','6','6','6','6','6','6','6','6','8','8','6','6','8','8','7','7','7','7','7','7','7','7','7','7','9','9','7','7','9','9','0','0','0','0','0','0','0','0','0','0','8','8','0','0','8','8','1','1','1','1','1','1','1','1','1','1','9','9','1','1','9','9','2','2','2','2','2','2','2','2','2','2','8','8','2','2','2','2','3','3','3','3','3','3','3','3','3','3','9','9','3','3','3','3','4','4','4','4','4','4','4','4','4','4','8','8','4','4','8','8','5','5','5','5','5','5','5','5','5','5','9','9','5','5','9','9','6','6','6','6','6','6','6','6','6','6','8','8','6','6','0','0','7','7','7','7','7','7','7','7','7','7','9','9','7','7','0','0','0','0','0','0','0','0','0','0','0','0','8','8','0','0','8','8','1','1','1','1','1','1','1','1','1','1','9','9','1','1','9','9','2','2','2','2','2','2','2','2','2','2','8','8','2','2','2','2','3','3','3','3','3','3','3','3','3','3','9','9','3','3','3','3','4','4','4','4','4','4','4','4','4','4','8','8','4','4','8','8','5','5','5','5','5','5','5','5','5','5','9','9','5','5','9','9','6','6','6','6','6','6','6','6','6','6','8','8','6','6','0','0','7','7','7','7','7','7','7','7','7','7','9','9','7','7','0','0','0','0','0','0','0','0','0','0','0','0','8','8','0','0','8','8','1','1','1','1','1','1','1','1','1','1','9','9','1','1','9','9','2','2','2','2','2','2','2','2','2','2','8','8','2','2','4','4','3','3','3','3','3','3','3','3','3','3','9','9','3','3','5','5','4','4','4','4','4','4','4','4','4','4','8','8','4','4','8','8','5','5','5','5','5','5','5','5','5','5','9','9','5','5','9','9','6','6','6','6','6','6','6','6','6','6','8','8','6','6','0','0','7','7','7','7','7','7','7','7','7','7','9','9','7','7','0','0','0','0','0','0','0','0','0','0','0','0','8','8','0','0','8','8','1','1','1','1','1','1','1','1','1','1','9','9','1','1','9','9','2','2','2','2','2','2','2','2','2','2','8','8','2','2','4','4','3','3','3','3','3','3','3','3','3','3','9','9','3','3','5','5','4','4','4','4','4','4','4','4','4','4','8','8','4','4','8','8','5','5','5','5','5','5','5','5','5','5','9','9','5','5','9','9','6','6','6','6','6','6','6','6','6','6','8','8','6','6','0','0','7','7','7','7','7','7','7','7','7','7','9','9','7','7','0','0','0','0','0','0','0','0','0','0','0','0','8','8','0','0','8','8','1','1','1','1','1','1','1','1','1','1','9','9','1','1','9','9','2','2','2','2','2','2','2','2','2','2','8','8','2','2','6','6','3','3','3','3','3','3','3','3','3','3','9','9','3','3','7','7','4','4','4','4','4','4','4','4','4','4','8','8','4','4','8','8','5','5','5','5','5','5','5','5','5','5','9','9','5','5','9','9','6','6','6','6','6','6','6','6','6','6','8','8','6','6','0','0','7','7','7','7','7','7','7','7','7','7','9','9','7','7','0','0','0','0','0','0','0','0','0','0','0','0','8','8','0','0','8','8','1','1','1','1','1','1','1','1','1','1','9','9','1','1','9','9','2','2','2','2','2','2','2','2','2','2','8','8','2','2','6','6','3','3','3','3','3','3','3','3','3','3','9','9','3','3','7','7','4','4','4','4','4','4','4','4','4','4','8','8','4','4','8','8','5','5','5','5','5','5','5','5','5','5','9','9','5','5','9','9','6','6','6','6','6','6','6','6'};
	private static final char[] DPD_TO_DIGIT_2 = {'0','0','0','0','0','0','0','0','0','0','0','0','8','8','8','8','0','0','0','0','0','0','0','0','0','0','0','0','8','8','8','8','0','0','0','0','0','0','0','0','0','0','0','0','8','8','8','8','0','0','0','0','0','0','0','0','0','0','0','0','8','8','8','8','0','0','0','0','0','0','0','0','0','0','0','0','8','8','0','0','0','0','0','0','0','0','0','0','0','0','0','0','8','8','0','0','0','0','0','0','0','0','0','0','0','0','0','0','8','8','8','8','0','0','0','0','0','0','0','0','0','0','0','0','8','8','8','8','1','1','1','1','1','1','1','1','1','1','1','1','9','9','9','9','1','1','1','1','1','1','1','1','1','1','1','1','9','9','9','9','1','1','1','1','1','1','1','1','1','1','1','1','9','9','9','9','1','1','1','1','1','1','1','1','1','1','1','1','9','9','9','9','1','1','1','1','1','1','1','1','1','1','1','1','9','9','1','1','1','1','1','1','1','1','1','1','1','1','1','1','9','9','1','1','1','1','1','1','1','1','1','1','1','1','1','1','9','9','9','9','1','1','1','1','1','1','1','1','1','1','1','1','9','9','9','9','2','2','2','2','2','2','2','2','2','2','2','2','8','8','8','8','2','2','2','2','2','2','2','2','2','2','2','2','8','8','8','8','2','2','2','2','2','2','2','2','2','2','2','2','8','8','8','8','2','2','2','2','2','2','2','2','2','2','2','2','8','8','8','8','2','2','2','2','2','2','2','2','2','2','2','2','8','8','2','2','2','2','2','2','2','2','2','2','2','2','2','2','8','8','2','2','2','2','2','2','2','2','2','2','2','2','2','2','8','8','0','0','2','2','2','2','2','2','2','2','2','2','2','2','8','8','0','0','3','3','3','3','3','3','3','3','3','3','3','3','9','9','9','9','3','3','3','3','3','3','3','3','3','3','3','3','9','9','9','9','3','3','3','3','3','3','3','3','3','3','3','3','9','9','9','9','3','3','3','3','3','3','3','3','3','3','3','3','9','9','9','9','3','3','3','3','3','3','3','3','3','3','3','3','9','9','3','3','3','3','3','3','3','3','3','3','3','3','3','3','9','9','3','3','3','3','3','3','3','3','3','3','3','3','3','3','9','9','0','0','3','3','3','3','3','3','3','3','3','3','3','3','9','9','0','0','4','4','4','4','4','4','4','4','4','4','4','4','8','8','8','8','4','4','4','4','4','4','4','4','4','4','4','4','8','8','8','8','4','4','4','4','4','4','4','4','4','4','4','4','8','8','8','8','4','4','4','4','4','4','4','4','4','4','4','4','8','8','8','8','4','4','4','4','4','4','4','4','4','4','4','4','8','8','4','4','4','4','4','4','4','4','4','4','4','4','4','4','8','8','4','4','4','4','4','4','4','4','4','4','4','4','4','4','8','8','0','0','4','4','4','4','4','4','4','4','4','4','4','4','8','8','0','0','5','5','5','5','5','5','5','5','5','5','5','5','9','9','9','9','5','5','5','5','5','5','5','5','5','5','5','5','9','9','9','9','5','5','5','5','5','5','5','5','5','5','5','5','9','9','9','9','5','5','5','5','5','5','5','5','5','5','5','5','9','9','9','9','5','5','5','5','5','5','5','5','5','5','5','5','9','9','5','5','5','5','5','5','5','5','5','5','5','5','5','5','9','9','5','5','5','5','5','5','5','5','5','5','5','5','5','5','9','9','0','0','5','5','5','5','5','5','5','5','5','5','5','5','9','9','0','0','6','6','6','6','6','6','6','6','6','6','6','6','8','8','8','8','6','6','6','6','6','6','6','6','6','6','6','6','8','8','8','8','6','6','6','6','6','6','6','6','6','6','6','6','8','8','8','8','6','6','6','6','6','6','6','6','6','6','6','6','8','8','8','8','6','6','6','6','6','6','6','6','6','6','6','6','8','8','6','6','6','6','6','6','6','6','6','6','6','6','6','6','8','8','6','6','6','6','6','6','6','6','6','6','6','6','6','6','8','8','0','0','6','6','6','6','6','6','6','6','6','6','6','6','8','8','0','0','7','7','7','7','7','7','7','7','7','7','7','7','9','9','9','9','7','7','7','7','7','7','7','7','7','7','7','7','9','9','9','9','7','7','7','7','7','7','7','7','7','7','7','7','9','9','9','9','7','7','7','7','7','7','7','7','7','7','7','7','9','9','9','9','7','7','7','7','7','7','7','7','7','7','7','7','9','9','7','7','7','7','7','7','7','7','7','7','7','7','7','7','9','9','7','7','7','7','7','7','7','7','7','7'};
	private static final long[][] DIGIT_VALUES = {
			{0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
			{0, 10, 20, 30, 40, 50, 60, 70, 80, 90},
			{0, 100, 200, 300, 400, 500, 600, 700, 800, 900},
			{0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000},
			{0, 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000},
			{0, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000},
			{0, 1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000},
			{0, 10000000, 20000000, 30000000, 40000000, 50000000, 60000000, 70000000, 80000000, 90000000},
			{0, 100000000L, 200000000L, 300000000L, 400000000L, 500000000L, 600000000L, 700000000L, 800000000L, 900000000L},
			{0, 1000000000L, 2000000000L, 3000000000L, 4000000000L, 5000000000L, 6000000000L, 7000000000L, 8000000000L, 9000000000L},
			{0, 10000000000L, 20000000000L, 30000000000L, 40000000000L, 50000000000L, 60000000000L, 70000000000L, 80000000000L, 90000000000L},
			{0, 100000000000L, 200000000000L, 300000000000L, 400000000000L, 500000000000L, 600000000000L, 700000000000L, 800000000000L, 900000000000L},
			{0, 1000000000000L, 2000000000000L, 3000000000000L, 4000000000000L, 5000000000000L, 6000000000000L, 7000000000000L, 8000000000000L, 9000000000000L},
			{0, 10000000000000L, 20000000000000L, 30000000000000L, 40000000000000L, 50000000000000L, 60000000000000L, 70000000000000L, 80000000000000L, 90000000000000L},
			{0, 100000000000000L, 200000000000000L, 300000000000000L, 400000000000000L, 500000000000000L, 600000000000000L, 700000000000000L, 800000000000000L, 900000000000000L},
	};
	private static final int[] DIGIT_INDEX_SHIFT = {0, 0, 0, 10, 10, 10, 20, 20, 20, 30, 30, 30, 40, 40, 40};
	private static final char[][] DIGIT_INDEX_DIGITS = {DPD_TO_DIGIT_0, DPD_TO_DIGIT_1, DPD_TO_DIGIT_2, DPD_TO_DIGIT_0, DPD_TO_DIGIT_1, DPD_TO_DIGIT_2, DPD_TO_DIGIT_0, DPD_TO_DIGIT_1, DPD_TO_DIGIT_2, DPD_TO_DIGIT_0, DPD_TO_DIGIT_1, DPD_TO_DIGIT_2, DPD_TO_DIGIT_0, DPD_TO_DIGIT_1, DPD_TO_DIGIT_2};
	private static final ThreadLocal<StringBuilder> STRING_BUILDER_LOCAL = new ThreadLocal<StringBuilder>() {
		protected StringBuilder initialValue() {
			return new StringBuilder(15);
		};
	};

	public static final Encoding ENCODING = new Encoding() {
		@Override
		public long encode(long value) {
			return longToDpd(value);
		}
	};
	public static final Encoding DECODING = new Encoding() {
		@Override
		public long encode(long dpd) {
			return dpdToLong(dpd);
		}
	};

	/**
	 * Converts 3 BCD digits to DPD.
	 * 
	 * @param bcd
	 *            12 bit bcd encoding of 3 decimal digits
	 * @return 10 bit dpd encoding of the same 3 decimal digits
	 */
	public static int bcdToDpd(final int bcd) {
		return intDigitsToDpd((bcd & 0x00000f00) >>> 8, (bcd & 0x000000f0) >>> 4, bcd & 0x0000000f);
	}

	/**
	 * Converts an integer value from 0-999 to DPD.
	 * 
	 * @param value
	 *            integer value from 0 to 999
	 * @return 10 bit dpd encoding of the same value
	 */
	public static int intToDpd(final int value) {
		return INT_TO_DPD[value];
	}

	/**
	 * Converts 10 DPD bits to an integer value from 0 to 999.
	 * 
	 * @param dpd
	 *            10 DPD value encoding 3 decimal digits
	 * @return 3 decimal digits as value from 0 to 999
	 */
	public static int dpdToInt(final int dpd) {
		return DPD_TO_INT_10[dpd];
	}

	public static int canonicalizeDeclet(final int dpd) {
		return INT_TO_DPD[DPD_TO_INT_10[dpd]];
	}

	public static long canonicalize(final long dpd) {
		return canonicalizeDeclet((int) (dpd & 0x3ff)) |
				(canonicalizeDeclet((int) ((dpd >>> 10) & 0x3ff)) << 10) |
				(canonicalizeDeclet((int) ((dpd >>> 20) & 0x3ff)) << 20) |
				(canonicalizeDeclet((int) ((dpd >>> 30) & 0x3ff)) << 30) |
				(canonicalizeDeclet((int) ((dpd >>> 40) & 0x3ff)) << 40);
	}

	public static boolean isCanonicalDeclet(final int dpd) {
		return dpd < 1000;
	}
	public static boolean isCanonical(final long dpd) {
		return isCanonicalDeclet((int) (dpd & 0x3ff)) &
				isCanonicalDeclet((int) ((dpd >>> 10) & 0x3ff)) &
				isCanonicalDeclet((int) ((dpd >>> 20) & 0x3ff)) &
				isCanonicalDeclet((int) ((dpd >>> 30) & 0x3ff)) &
				isCanonicalDeclet((int) ((dpd >>> 40) & 0x3ff));
	}

	public static int addDeclet(final int dpdA, final int dpdB, int carry) {
		final int sum = DPD_TO_INT_10[dpdA] + DPD_TO_INT_10[dpdB] + carry;
		return sum < 1000 ? INT_TO_DPD[sum] : (1<<11) | INT_TO_DPD[sum-1000];
	}

	public static long add(final long dpdA, final long dpdB) {
		final int sum10 = addDeclet((int)(dpdA & 0x3ff), (int)(dpdB & 0x3ff), 0);
		final int sum20 = addDeclet((int)((dpdA >>> 10) & 0x3ff), (int)((dpdB >> 10) & 0x3ff), sum10 >>> 11);
		final int sum30 = addDeclet((int)((dpdA >>> 20) & 0x3ff), (int)((dpdB >> 20) & 0x3ff), sum20 >>> 11);
		final int sum40 = addDeclet((int)((dpdA >>> 30) & 0x3ff), (int)((dpdB >> 30) & 0x3ff), sum30 >>> 11);
		final int sum50 = addDeclet((int)((dpdA >>> 40) & 0x3ff), (int)((dpdB >> 40) & 0x3ff), sum40 >>> 11);
		return (sum10 & 0x3ffL) |
				((sum20 & 0x3ffL) << 10) |
				((sum30 & 0x3ffL) << 20) |
				((sum40 & 0x3ffL) << 30) |
				((sum50 & 0x3ffL) << 40) |
				((sum50 & 0x400L) << 51);
	}

	public static int incDeclet(final int dpd, int carry) {
		final int sum = DPD_TO_INT_10[dpd] + 1 + carry;
		return sum < 1000 ? INT_TO_DPD[sum] : (1<<11) | INT_TO_DPD[sum-1000];
	}

	public static long inc(final long dpd) {
		final int sum10 = incDeclet((int)(dpd & 0x3ff), 0);
		final int car10 = sum10 >>> 11;
		if (car10 == 0) {
			return (dpd & 0x0003fffffffffc00L) | (sum10 & 0x3ff);
		}
		final int sum20 = incDeclet((int)((dpd >>> 10) & 0x3ff), car10);
		final int car20 = sum20 >>> 11;
		if (car20 == 0) {
			return (dpd & 0x0003fffffff00000L) | ((sum20 & 0x3ff) << 10) | (sum10 & 0x3ff);
		}
		final int sum30 = incDeclet((int)((dpd >>> 20) & 0x3ff), car20);
		final int car30 = sum30 >>> 11;
		if (car30 == 0) {
			return (dpd & 0x0003ffffc0000000L) | ((sum30 & 0x3ff) << 20) | ((sum20 & 0x3ff) << 10) | (sum10 & 0x3ff);
		}
		final int sum40 = incDeclet((int)((dpd >>> 30) & 0x3ff), car30);
		final int car40 = sum40 >>> 11;
		if (car40 == 0) {
			return (dpd & 0x0003ff0000000000L) | ((sum40 & 0x3ff) << 30) | ((sum30 & 0x3ff) << 20) | ((sum20 & 0x3ff) << 10) | (sum10 & 0x3ff);
		}
		final int sum50 = incDeclet((int)((dpd >>> 40) & 0x3ff), car40);
		return (sum10 & 0x3ffL) |
				((sum20 & 0x3ffL) << 10) |
				((sum30 & 0x3ffL) << 20) |
				((sum40 & 0x3ffL) << 30) |
				((sum50 & 0x3ffL) << 40) |
				((sum50 & 0x400L) << 51);
	}

	public static long shiftRightDeclet(final int dpdHi, final int dpdLo) {
		return (INT_TO_DPD[DPD_TO_INT_LSHIFT_2[dpdHi] + DPD_TO_INT_RSHIFT_1[dpdLo]]) & 0x3ffL;
	}
	public static long shiftLeftDeclet(final int dpdHi, final int dpdLo) {
		return (INT_TO_DPD[DPD_TO_INT_LSHIFT_1[dpdHi] + DPD_TO_INT_RSHIFT_2[dpdLo]]) & 0x3ffL;
	}
	public static long shiftRight(final long dpd) {
		return shiftRight(
				0,
				(int)((dpd >>> 40) & 0x3ff),
				(int)((dpd >>> 30) & 0x3ff),
				(int)((dpd >>> 20) & 0x3ff),
				(int)((dpd >>> 10) & 0x3ff),
				(int)(dpd & 0x3ff));
	}
	public static long shiftRight(final int msd, final int dpd50, final int dpd40, final int dpd30, final int dpd20, final int dpd10) {
		return shiftRightDeclet(dpd20, dpd10) |
				(shiftRightDeclet(dpd30, dpd20) << 10) |
				(shiftRightDeclet(dpd40, dpd30) << 20) |
				(shiftRightDeclet(dpd50, dpd40) << 30) |
				(shiftRightDeclet(msd, dpd50) << 40);
	}

	public static long shiftRight2(final int msd, final long dpd) {
		return shiftRight2(
				msd,
				(int)((dpd >>> 40) & 0x3ff),
				(int)((dpd >>> 30) & 0x3ff),
				(int)((dpd >>> 20) & 0x3ff),
				(int)((dpd >>> 10) & 0x3ff),
				(int)(dpd & 0x3ff));
	}
	public static long shiftRight2(final int msd, final int dpd50, final int dpd40, final int dpd30, final int dpd20, final int dpd10) {
		return shiftLeftDeclet(dpd20, dpd10) |
				(shiftLeftDeclet(dpd30, dpd20) << 10) |
				(shiftLeftDeclet(dpd40, dpd30) << 20) |
				(shiftLeftDeclet(dpd50, dpd40) << 30) |
				(shiftLeftDeclet(msd, dpd50) << 40);
	}

	private static long shiftRight0to2(final int msd,
									   final int dpd50,
									   final int dpd40,
									   final int dpd30,
									   final int dpd20,
									   final int dpd10,
									   final int n) {
		if (n == 1) {
			return shiftRight(msd, dpd50, dpd40, dpd30, dpd20, dpd10);
		}
		if (n == 2) {
			return shiftRight2(msd, dpd50, dpd40, dpd30, dpd20, dpd10);
		}
		return (dpd10 & 0x3ffL) | ((dpd20 & 0x3ffL) << 10) | ((dpd30 & 0x3ffL) << 20) | ((dpd40 & 0x3ffL) << 30) | ((dpd50 & 0x3ffL) << 40) | ((msd & 0x00fL) << 50);
	}

	public static long shiftRight(final long dpd, final int n) {
		return shiftRight(0, dpd, n);
	}
	public static long shiftRight(final int msd, final long dpd, final int n) {
		final int dpd10 = (int)(dpd & 0x3ff);
		final int dpd20 = (int)((dpd >>> 10) & 0x3ff);
		final int dpd30 = (int)((dpd >>> 20) & 0x3ff);
		final int dpd40 = (int)((dpd >>> 30) & 0x3ff);
		final int dpd50 = (int)((dpd >>> 40) & 0x3ff);
		//binary search, optimized for small n
		if (n < 6) {
			if (n < 3) {
				return shiftRight0to2(msd, dpd50, dpd40, dpd30, dpd20, dpd10, n);
			}
			return shiftRight0to2(0, msd, dpd50, dpd40, dpd30, dpd20, n-3);
		}
		if (n < 12) {
			if (n < 9) {
				return shiftRight0to2(0, 0, msd, dpd50, dpd40, dpd30, n - 6);
			}
			return shiftRight0to2(0, 0, 0, msd, dpd50, dpd40, n-9);
		}
		if (n < 15) {
			return shiftRight0to2(0, 0, 0, 0, msd, dpd50, n-12);
		}
		return n < 16 ? msd : 0;
	}

	public static long shiftLeft(final long dpd) {
		return shiftLeft(
				(int)((dpd >>> 40) & 0x3ff),
				(int)((dpd >>> 30) & 0x3ff),
				(int)((dpd >>> 20) & 0x3ff),
				(int)((dpd >>> 10) & 0x3ff),
				(int)(dpd & 0x3ff));
	}
	public static long shiftLeft2(final long dpd) {
		return shiftLeft2(
				(int)((dpd >>> 40) & 0x3ff),
				(int)((dpd >>> 30) & 0x3ff),
				(int)((dpd >>> 20) & 0x3ff),
				(int)((dpd >>> 10) & 0x3ff),
				(int)(dpd & 0x3ff));
	}
	public static long shiftLeft(final int dpd50, final int dpd40, final int dpd30, final int dpd20, final int dpd10) {
		return ((DPD_TO_INT_LSHIFT_1[dpd50] & 0x00fL) << 51) | shiftRight2(dpd50, dpd40, dpd30, dpd20, dpd10, 0);
	}
	public static long shiftLeft2(final int dpd50, final int dpd40, final int dpd30, final int dpd20, final int dpd10) {
		return ((DPD_TO_INT_LSHIFT_2[dpd50] & 0x00fL) << 51) | shiftRight(dpd50, dpd40, dpd30, dpd20, dpd10, 0);
	}
	private static long shiftLeft0to2(final int dpd50,
									  final int dpd40,
									  final int dpd30,
									  final int dpd20,
									  final int dpd10,
									  final int n) {
		if (n == 1) {
			return shiftLeft(dpd50, dpd40, dpd30, dpd20, dpd10);
		}
		if (n == 2) {
			return shiftLeft2(dpd50, dpd40, dpd30, dpd20, dpd10);
		}
		return (dpd10 & 0x3ffL) | ((dpd20 & 0x3ffL) << 10) | ((dpd30 & 0x3ffL) << 20) | ((dpd40 & 0x3ffL) << 30) | ((dpd50 & 0x3ffL) << 40);
	}

	public static long shiftLeft(final long dpd, final int n) {
		final int dpd10 = (int)(dpd & 0x3ff);
		final int dpd20 = (int)((dpd >>> 10) & 0x3ff);
		final int dpd30 = (int)((dpd >>> 20) & 0x3ff);
		final int dpd40 = (int)((dpd >>> 30) & 0x3ff);
		final int dpd50 = (int)((dpd >>> 40) & 0x3ff);
		//binary search, optimized for small n
		if (n < 6) {
			if (n < 3) {
				return shiftLeft0to2(dpd50, dpd40, dpd30, dpd20, dpd10, n);
			}
			return shiftLeft0to2(dpd40, dpd30, dpd20, dpd10, 0, n-3);
		}
		if (n < 12) {
			if (n < 9) {
				return shiftLeft0to2(dpd30, dpd20, dpd10, 0, 0, n-6);
			}
			return shiftLeft0to2(dpd20, dpd10, 0, 0, 0, n-9);
		}
		if (n < 15) {
			return shiftLeft0to2(dpd10, 0, 0, 0, 0, n-12);
		}
		return 0;
	}

	public static int subDeclet(final int dpdA, final int dpdB, int carry) {
		final int sub = DPD_TO_INT_10[dpdA] - DPD_TO_INT_10[dpdB] - carry;
		return sub >= 0 ? INT_TO_DPD[sub] : (1<<11) | INT_TO_DPD[sub+1000];
	}

	public static long sub(final long dpdA, final long dpdB) {
		final int sub10 = subDeclet((int)(dpdA & 0x3ff), (int)(dpdB & 0x3ff), 0);
		final int sub20 = subDeclet((int)((dpdA >>> 10) & 0x3ff), (int)((dpdB >> 10) & 0x3ff), sub10 >>> 11);
		final int sub30 = subDeclet((int)((dpdA >>> 20) & 0x3ff), (int)((dpdB >> 20) & 0x3ff), sub20 >>> 11);
		final int sub40 = subDeclet((int)((dpdA >>> 30) & 0x3ff), (int)((dpdB >> 30) & 0x3ff), sub30 >>> 11);
		final int sub50 = subDeclet((int)((dpdA >>> 40) & 0x3ff), (int)((dpdB >> 40) & 0x3ff), sub40 >>> 11);
		return (sub10 & 0x3ffL) |
				((sub20 & 0x3ffL) << 10) |
				((sub30 & 0x3ffL) << 20) |
				((sub40 & 0x3ffL) << 30) |
				((sub50 & 0x3ffL) << 40) |
				((sub50 & 0x400L) << 51);
	}

	public static int compareDeclet(final int dpdA, final int dpdB) {
		return DPD_TO_INT_10[dpdA] - DPD_TO_INT_10[dpdB];
	}
	public static int compare(final long dpdA, final long dpdB) {
		int cmp;
		cmp = compareDeclet((int)((dpdA >>> 40) & 0x3ff), (int)((dpdB >>> 40) & 0x3ff));
		if (cmp != 0) return cmp;
		cmp = compareDeclet((int)((dpdA >>> 30) & 0x3ff), (int)((dpdB >>> 30) & 0x3ff));
		if (cmp != 0) return cmp;
		cmp = compareDeclet((int)((dpdA >>> 20) & 0x3ff), (int)((dpdB >>> 20) & 0x3ff));
		if (cmp != 0) return cmp;
		cmp = compareDeclet((int)((dpdA >>> 10) & 0x3ff), (int)((dpdB >>> 10) & 0x3ff));
		if (cmp != 0) return cmp;
		return compareDeclet((int)(dpdA & 0x3ff), (int)(dpdB & 0x3ff));
	}

	public static int numberOfLeadingZerosDeclet(final int dpd) {
		return DPD_TO_INT_NLZ[dpd];
	}
	public static int numberOfLeadingZeros(final long dpd) {
		int nlz;
		nlz = numberOfLeadingZerosDeclet((int)((dpd >>> 40) & 0x3ff));
		if (nlz < 3) return nlz;
		nlz = numberOfLeadingZerosDeclet((int)((dpd >>> 30) & 0x3ff));
		if (nlz < 3) return nlz+3;
		nlz = numberOfLeadingZerosDeclet((int)((dpd >>> 20) & 0x3ff));
		if (nlz < 3) return nlz+6;
		nlz = numberOfLeadingZerosDeclet((int)((dpd >>> 10) & 0x3ff));
		if (nlz < 3) return nlz+9;
		return numberOfLeadingZerosDeclet((int)(dpd & 0x3ff)) + 12;
	}
	public static int numberOfTrailingZerosDeclet(final int dpd) {
		return DPD_TO_INT_NTZ[dpd];
	}
	public static int numberOfTrailingZeros(final long dpd) {
		int ntz;
		ntz = numberOfTrailingZerosDeclet((int)(dpd & 0x3ff));
		if (ntz < 3) return ntz;
		ntz = numberOfTrailingZerosDeclet((int)((dpd >>> 10) & 0x3ff));
		if (ntz < 3) return ntz+3;
		ntz = numberOfTrailingZerosDeclet((int)((dpd >>> 20) & 0x3ff));
		if (ntz < 3) return ntz+6;
		ntz = numberOfTrailingZerosDeclet((int)((dpd >>> 30) & 0x3ff));
		if (ntz < 3) return ntz+9;
		return numberOfTrailingZerosDeclet((int)((dpd >>> 40) & 0x3ff)) + 12;
	}

	public static boolean isZero(final long dpd) {
		return 0 == (dpd & 0x3ff)
				+ ((dpd >>> 10) & 0x3ff)
				+ ((dpd >>> 20) & 0x3ff)
				+ ((dpd >>> 30) & 0x3ff)
				+ ((dpd >>> 40) & 0x3ff);
	}
	public static int mod10(final long dpd) {
		return dpdToCharDigit0((int)(dpd & 0x3ff)) - '0';
	}

	public static long modPow10(final long dpd, final int n) {
		return dpdToLong(dpd) % pow10(n);//FIXME improve perf
	}

	private static long pow10(final int n) {
		return DIGIT_VALUES[n][1];
	}

	/**
	 * Converts 10 DPD bits to an integer value from 0 to 999 and returns the least significant digit of this 3 digit
	 * value. For instance returns '7' for a value 837,
	 * 
	 * @param dpd
	 *            10 DPD value encoding 3 decimal digits
	 * @return least significant digit of the decoded decimal value
	 */
	public static char dpdToCharDigit0(final int dpd) {
		return DPD_TO_DIGIT_0[dpd];
	}

	/**
	 * Converts 10 DPD bits to an integer value from 0 to 999 and returns the middle significant digit of this 3 digit
	 * value. For instance returns '3' for a value 837,
	 * 
	 * @param dpd
	 *            10 DPD value encoding 3 decimal digits
	 * @return middle significant digit of the decoded decimal value
	 */
	public static char dpdToCharDigit1(final int dpd) {
		return DPD_TO_DIGIT_1[dpd];
	}

	/**
	 * Converts 10 DPD bits to an integer value from 0 to 999 and returns the most significant digit of this 3 digit
	 * value. For instance returns '8' for a value 837,
	 * 
	 * @param dpd
	 *            10 DPD value encoding 3 decimal digits
	 * @return most significant digit of the decoded decimal value
	 */
	public static char dpdToCharDigit2(final int dpd) {
		return DPD_TO_DIGIT_2[dpd];
	}

	/**
	 * Converts 50 DPD bits to an integer value from 0 to 999,999,999,999,999 and returns i-th least significant digit
	 * of this 15 digit value. For instance returns '8' for a value 12837 and i=2.
	 * 
	 * @param dpd
	 *            50 DPD value encoding 15 decimal digits
	 * @param i
	 *            the decimal digit index, 0 for least significant and 14 for most significant digit
	 * @return i-th least significant digit of the decoded decimal value
	 */
	public static char dpdToCharDigit(final long dpd, final int i) {
		final long dpd10 = (dpd >>> DIGIT_INDEX_SHIFT[i]) & 0x3ff;
		return DIGIT_INDEX_DIGITS[i][(int) dpd10];
	}

	/**
	 * Converts 50 DPD bits to a long value from 0 to 999,999,999,999,999.
	 * 
	 * @param dpd
	 *            50 DPD value encoding 15 decimal digits
	 * @return the long value between 0 and 999,999,999,999,999.
	 */
	public static long dpdToLong(final long dpd) {
		//@formatter:off
		return DPD_TO_INT_10[(int) (dpd & 0x3ff)] + 
				DPD_TO_INT_20[(int) ((dpd >>> 10) & 0x3ff)] + 
				DPD_TO_INT_30[(int) ((dpd >>> 20) & 0x3ff)] + 
				DPD_TO_INT_40[(int) ((dpd >>> 30) & 0x3ff)] +
				DPD_TO_INT_50[(int) ((dpd >>> 40) & 0x3ff)];
		//@formatter:on
	}

	/**
	 * Converts 50 DPD bits to the low part of the significant, an integer value from 0 to 999,999,999.
	 * 
	 * @param dpd
	 *            50 DPD value encoding 15 decimal digits
	 * @return the int value between 0 and 999,999,999.
	 */
	public static int dpdToSignificandLo(final long dpd) {
		return DPD_TO_INT_10[(int) (dpd & 0x3ff)] +
				DPD_TO_INT_20[(int) ((dpd >>> 10) & 0x3ff)] + 
				DPD_TO_INT_30[(int) ((dpd >>> 20) & 0x3ff)]; 
	}

	/**
	 * Converts 50 DPD bits to the high part of the significant, an integer value from 0 to 999,999.
	 * 
	 * @param dpd
	 *            50 DPD value encoding 15 decimal digits
	 * @return the int value between 0 and 999,999.
	 */
	public static int dpdToSignificandHi(final long dpd) {
		return DPD_TO_INT_10[(int) ((dpd >>> 30) & 0x3ff)] +
				DPD_TO_INT_20[(int) ((dpd >>> 40) & 0x3ff)];
	}

	/**
	 * Converts a long value from 0 to 999,999,999,999,999 to DPD encoding with 50 bits.
	 * 
	 * @param value
	 *            the long value between 0 and 999,999,999,999,999
	 * @return 50 DPD value encoding 15 decimal digits
	 */
	public static long longToDpd(final long value) {
		final long value1 = value / 1000;
		final int digits0 = (int) (value % 1000);
		final long value2 = value1 / 1000;
		final int digits1 = (int) (value1 % 1000);
		final long value3 = value2 / 1000;
		final int digits2 = (int) (value2 % 1000);
		final long value4 = value3 / 1000;
		final int digits3 = (int) (value3 % 1000);
		final int digits4 = (int) (value4 % 1000);
		return (intToDpd(digits4) << 40) | (intToDpd(digits3) << 30) | (intToDpd(digits2) << 20)
				| (intToDpd(digits1) << 10) | intToDpd(digits0);
	}

	/**
	 * Converts 50 DPD bits to a long value from 0 to 999,999,999,999,999.
	 * 
	 * @param dpd
	 *            50 DPD value encoding 15 decimal digits
	 * @return the long value between 0 and 999,999,999,999,999.
	 */
	public static String dpdToString(final long dpd) {
		final StringBuilder sb = STRING_BUILDER_LOCAL.get();
		sb.setLength(0);
		try {
			return dpdToAppendable(dpd, sb).toString();
		} catch (IOException e) {
			// should never happen with string builder
			throw new RuntimeException("internal error: e=" + e, e);
		}
	}

	public static Appendable dpdToAppendable(final long dpd, final Appendable appendable) throws IOException {
		final int dpd10to30 = (int) (dpd & 0x3fffffff);
		final int dpd10 = dpd10to30 & 0x3ff;
		final int dpd20 = (dpd10to30 >>> 10) & 0x3ff;
		final int dpd30 = (dpd10to30 >>> 20) & 0x3ff;
		final int dpd40 = (int) ((dpd >>> 30) & 0x3ff);
		final int dpd50 = (int) ((dpd >>> 40) & 0x3ff);
		appendable.append(DPD_TO_DIGIT_2[dpd50]).append(DPD_TO_DIGIT_1[dpd50]).append(DPD_TO_DIGIT_0[dpd50]);
		appendable.append(DPD_TO_DIGIT_2[dpd40]).append(DPD_TO_DIGIT_1[dpd40]).append(DPD_TO_DIGIT_0[dpd40]);
		appendable.append(DPD_TO_DIGIT_2[dpd30]).append(DPD_TO_DIGIT_1[dpd30]).append(DPD_TO_DIGIT_0[dpd30]);
		appendable.append(DPD_TO_DIGIT_2[dpd20]).append(DPD_TO_DIGIT_1[dpd20]).append(DPD_TO_DIGIT_0[dpd20]);
		appendable.append(DPD_TO_DIGIT_2[dpd10]).append(DPD_TO_DIGIT_1[dpd10]).append(DPD_TO_DIGIT_0[dpd10]);
		return appendable;
	}

	/**
	 * Converts 3 char digits digits to DPD.
	 * 
	 * @param d2
	 *            most significant digit, '0'-'9'
	 * @param d1
	 *            middle significant digit, '0'-'9'
	 * @param d0
	 *            least significant digit, '0'-'9'
	 * @return 10 bit dpd encoding of the same 3 decimal digits
	 */
	public static int charDigitsToDpd(final char d2, final char d1, final char d0) {
		return intDigitsToDpd(d2 - '0', d1 - '0', d0 - '0');
	}

	/**
	 * Converts 3 integer digits digits to DPD.
	 * 
	 * @param d2
	 *            most significant digit, 0-9
	 * @param d1
	 *            middle significant digit, 0-9
	 * @param d0
	 *            least significant digit, 0-9
	 * @return 10 bit dpd encoding of the same 3 decimal digits
	 */
	public static int intDigitsToDpd(final int d2, final int d1, final int d0) {
		return intToDpd((int) (DIGIT_VALUES[2][d2] + DIGIT_VALUES[1][d1] + d0));
	}

	static int[] initIntMultiple(final int[] values, final int factor) {
		final int[] multiples = new int[values.length];
		for (int i = 0; i < multiples.length; i++) {
			multiples[i] = factor * values[i];
		}
		return multiples;
	}

	static long[] initLongMultiple(final int[] values, final long factor) {
		final long[] multiples = new long[values.length];
		for (int i = 0; i < multiples.length; i++) {
			multiples[i] = factor * values[i];
		}
		return multiples;
	}

	private static int[] initIntShift(final int[] values, final int shift) {
		final int[] shifted = new int[values.length];
		for (int i = 0; i < shifted.length; i++) {
			int shiftedValue = values[i];
			for (int j = shift; j < 0; j++) {
				shiftedValue /= 10;
			}
			for (int j = 0; j < shift; j++) {
				shiftedValue %= 100;
				shiftedValue *= 10;
			}
			shifted[i] = shiftedValue;
		}
		return shifted;
	}
	private static int[] nlz(final int[] values) {
		final int[] nlz = new int[values.length];
		for (int i = 0; i < nlz.length; i++) {
			final int val = values[i];
			if (val == 0) nlz[i] = 3;
			else if (val < 10) nlz[i] = 2;
			else if (val < 100) nlz[i] = 1;
		}
		return nlz;
	}
	private static int[] ntz(final int[] values) {
		final int[] ntz = new int[values.length];
		for (int i = 0; i < ntz.length; i++) {
			final int val = values[i];
			if (val == 0) ntz[i] = 3;
			else if ((val % 10) == 0) ntz[i] = ((val % 100) == 0) ? 2 : 1;
		}
		return ntz;
	}

	public static void main(String[] args) {
		final int len = Math.max(INT_TO_DPD.length, DecNum.BIN2DPD.length);// make it fail when not equal
		for (int i = 0; i < len; i++) {
			if (INT_TO_DPD[i] != DecNum.BIN2DPD[i]) {
				throw new IllegalStateException(i + ": " + INT_TO_DPD[i] + " != " + DecNum.BIN2DPD[i]);
			}
		}
		System.out.println("checked " + len + " values");
		final int len2 = Math.max(DPD_TO_INT_10.length, DecNum.DPD2BIN.length);// make it fail when not equal
		for (int i = 0; i < len2; i++) {
			if (DPD_TO_INT_10[i] != DecNum.DPD2BIN[i]) {
				throw new IllegalStateException(i + ": " + DPD_TO_INT_10[i] + " != " + DecNum.DPD2BIN[i]);
			}
		}
		System.out.println("checked " + len2 + " values");
	}
}
